'use strict';

describe('App', function () {
  var _React$addons$TestUti = React.addons.TestUtils,
      Simulate = _React$addons$TestUti.Simulate,
      renderIntoDocument = _React$addons$TestUti.renderIntoDocument,
      findRenderedDOMComponentWithClass = _React$addons$TestUti.findRenderedDOMComponentWithClass,
      scryRenderedDOMComponentsWithClass = _React$addons$TestUti.scryRenderedDOMComponentsWithClass;


  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: function searchYouTube() {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // NOTE: `renderIntoDocument` will only work for stateful class component

    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(function (videoEntryTitle) {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  describe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach(function (videoEntryTitle, i) {
        return expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIlJlYWN0IiwiYWRkb25zIiwiVGVzdFV0aWxzIiwiU2ltdWxhdGUiLCJyZW5kZXJJbnRvRG9jdW1lbnQiLCJmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MiLCJzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsIkFwcCIsInRvIiwiYmUiLCJ0cnVlIiwidmlkZW9QbGF5ZXIiLCJleGlzdCIsInZpZGVvTGlzdCIsInZpZGVvRW50cnlUaXRsZUVsZW1lbnRzIiwiZm9yRWFjaCIsInZpZGVvRW50cnlUaXRsZSIsImNsaWNrIiwicGxheWVyIiwicGxheWVyVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZXF1YWwiLCJzZWFyY2hZb3VUdWJlU3R1YiIsInNpbm9uIiwic3R1YiIsInlpZWxkcyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJjYWxsZWQiLCJpIiwic25pcHBldCIsInRpdGxlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxTQUFTLEtBQVQsRUFBZ0IsWUFBVztBQUFBLDhCQU1yQkMsTUFBTUMsTUFBTixDQUFhQyxTQU5RO0FBQUEsTUFFdkJDLFFBRnVCLHlCQUV2QkEsUUFGdUI7QUFBQSxNQUd2QkMsa0JBSHVCLHlCQUd2QkEsa0JBSHVCO0FBQUEsTUFJdkJDLGlDQUp1Qix5QkFJdkJBLGlDQUp1QjtBQUFBLE1BS3ZCQyxrQ0FMdUIseUJBS3ZCQSxrQ0FMdUI7OztBQVF6QixNQUFJQyxHQUFKOztBQUVBQyxhQUFXLFlBQVc7QUFDcEJELFVBQU1ILG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlLHlCQUFNLENBQUUsQ0FBNUIsR0FESSxDQUFOO0FBR0QsR0FKRDs7QUFNQUssS0FBRyxzQ0FBSCxFQUEyQyxZQUFXO0FBQ3BEQyxXQUFPVixNQUFNVyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QkMsR0FBOUIsQ0FBUCxFQUEyQ0MsRUFBM0MsQ0FBOENDLEVBQTlDLENBQWlEQyxJQUFqRDtBQUNELEdBRkQ7O0FBSUFQLEtBQUcsOENBQUgsRUFBbUQsWUFBVztBQUM1RCxRQUFJUSxjQUFjWixrQ0FBa0NFLEdBQWxDLEVBQXVDLGNBQXZDLENBQWxCO0FBQ0FHLFdBQU9PLFdBQVAsRUFBb0JILEVBQXBCLENBQXVCSSxLQUF2QjtBQUNELEdBSEQ7O0FBS0FULEtBQUcsNENBQUgsRUFBaUQsWUFBVztBQUMxRCxRQUFJVSxZQUFZZCxrQ0FBa0NFLEdBQWxDLEVBQXVDLFlBQXZDLENBQWhCO0FBQ0FHLFdBQU9TLFNBQVAsRUFBa0JMLEVBQWxCLENBQXFCSSxLQUFyQjtBQUNELEdBSEQ7O0FBS0FULEtBQUcsdUVBQUgsRUFBNEUsWUFBVztBQUNyRjs7QUFFQUMsV0FBT1YsTUFBTVcsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJDLEdBQTlCLENBQVAsRUFBMkNDLEVBQTNDLENBQThDQyxFQUE5QyxDQUFpREMsSUFBakQ7O0FBRUEsUUFBSUksMEJBQTBCZCxtQ0FBbUNDLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUE5Qjs7QUFFQWEsNEJBQXdCQyxPQUF4QixDQUFnQyxVQUFDQyxlQUFELEVBQXFCO0FBQ25EbkIsZUFBU29CLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNuQixrQ0FBa0NFLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJa0IsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBaEIsYUFBT2UsWUFBWUUsU0FBbkIsRUFBOEJiLEVBQTlCLENBQWlDYyxLQUFqQyxDQUF1Q04sZ0JBQWdCSyxTQUF2RDtBQUNELEtBUkQ7QUFTRCxHQWhCRDs7QUFrQkE1QixXQUFTLHVDQUFULEVBQWtELFlBQVc7QUFDM0QsUUFBSThCLGlCQUFKOztBQUVBckIsZUFBVyxZQUFXO0FBQ3BCcUIsMEJBQW9CQyxNQUFNQyxJQUFOLEVBQXBCO0FBQ0FGLHdCQUFrQkcsTUFBbEIsQ0FBeUJDLE9BQU9DLGFBQWhDO0FBQ0EzQixZQUFNSCxtQkFDSixvQkFBQyxHQUFELElBQUssZUFBZXlCLGlCQUFwQixHQURJLENBQU47QUFHRCxLQU5EOztBQVFBcEIsT0FBRyxxREFBSCxFQUEwRCxZQUFXO0FBQ25FQyxhQUFPbUIsa0JBQWtCTSxNQUF6QixFQUFpQ3JCLEVBQWpDLENBQW9DQyxFQUFwQyxDQUF1Q0MsSUFBdkM7QUFDRCxLQUZEOztBQUlBUCxPQUFHLCtDQUFILEVBQW9ELFlBQVc7QUFDN0RDLGFBQU9tQixrQkFBa0JNLE1BQXpCLEVBQWlDckIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2Qzs7QUFFQSxVQUFJSSwwQkFBMEJkLG1DQUFtQ0MsR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBYSw4QkFBd0JDLE9BQXhCLENBQWdDLFVBQUNDLGVBQUQsRUFBa0JjLENBQWxCO0FBQUEsZUFDOUIxQixPQUFPWSxnQkFBZ0JLLFNBQXZCLEVBQWtDYixFQUFsQyxDQUFxQ2MsS0FBckMsQ0FBMkNNLGNBQWNFLENBQWQsRUFBaUJDLE9BQWpCLENBQXlCQyxLQUFwRSxDQUQ4QjtBQUFBLE9BQWhDO0FBR0QsS0FSRDtBQVVELEdBekJEO0FBMEJELENBMUVEIiwiZmlsZSI6IkFwcFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZXNjcmliZSgnQXBwJywgZnVuY3Rpb24oKSB7XG4gIHZhciB7XG4gICAgU2ltdWxhdGUsXG4gICAgcmVuZGVySW50b0RvY3VtZW50LFxuICAgIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyxcbiAgICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzXG4gIH0gPSBSZWFjdC5hZGRvbnMuVGVzdFV0aWxzO1xuXG4gIHZhciBhcHA7XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9eygpID0+IHt9fS8+XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChSZWFjdC5Db21wb25lbnQuaXNQcm90b3R5cGVPZihBcHApKS50by5iZS50cnVlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb1BsYXllciBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9QbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgZXhwZWN0KHZpZGVvUGxheWVyKS50by5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9MaXN0IGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb0xpc3QgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdCcpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gcGxheWVyIHdoZW4gYSB2aWRlbyBlbnRyeVxcJ3MgdGl0bGUgaXMgY2xpY2tlZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vIE5PVEU6IGByZW5kZXJJbnRvRG9jdW1lbnRgIHdpbGwgb25seSB3b3JrIGZvciBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnRcbiAgICBcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcblxuICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlKSA9PiB7XG4gICAgICBTaW11bGF0ZS5jbGljayh2aWRlb0VudHJ5VGl0bGUpO1xuICAgICAgdmFyIHBsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICAgIHZhciBwbGF5ZXJUaXRsZSA9IHBsYXllci5xdWVyeVNlbGVjdG9yKCcudmlkZW8tcGxheWVyLWRldGFpbHMgaDMnKTtcblxuICAgICAgLy8gVGhpcyB0ZXN0IGFzc3VtZXMgdGhhdCBpZiB5b3UgY2FuIHN1Y2Nlc3NmdWxseSB1cGRhdGUgdGhlIHZpZGVvIHBsYXllcidzIHRpdGxlLFxuICAgICAgLy8geW91IGNhbiBhbHNvIHVwZGF0ZSB0aGUgdmlkZW8gYW5kIGRlc2NyaXB0aW9uXG4gICAgICBleHBlY3QocGxheWVyVGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3doZW4gcmVuZGVyaW5nIGxpdmUgZGF0YSBmcm9tIFlvdVR1YmUnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoWW91VHViZVN0dWI7XG5cbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIgPSBzaW5vbi5zdHViKCk7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1Yi55aWVsZHMod2luZG93LmZha2VWaWRlb0RhdGEpO1xuICAgICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9e3NlYXJjaFlvdVR1YmVTdHVifSAvPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsbCBgc2VhcmNoWW91VHViZWAgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChzZWFyY2hZb3VUdWJlU3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgbGl2ZSBkYXRhIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3Qoc2VhcmNoWW91VHViZVN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xuXG4gICAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PlxuICAgICAgICBleHBlY3QodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwoZmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKVxuICAgICAgKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuIl19