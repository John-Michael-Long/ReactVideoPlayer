'use strict';

describe('VideoList', function () {
  var createRenderer = React.addons.TestUtils.createRenderer;


  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });

  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = createRenderer();

    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render(React.createElement(VideoList, { videos: oneFakeVideo }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });

  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = createRenderer();

    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render(React.createElement(VideoList, { videos: threeFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });

  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = createRenderer();

    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render(React.createElement(VideoList, { videos: fiveFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(function (child) {
      return expect(child.type).to.equal(VideoListEntry);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImNyZWF0ZVJlbmRlcmVyIiwiUmVhY3QiLCJhZGRvbnMiLCJUZXN0VXRpbHMiLCJpdCIsImV4cGVjdCIsIkNvbXBvbmVudCIsImlzUHJvdG90eXBlT2YiLCJWaWRlb0xpc3QiLCJ0byIsImJlIiwiZmFsc2UiLCJzaGFsbG93UmVuZGVyZXIiLCJvbmVGYWtlVmlkZW8iLCJ3aW5kb3ciLCJmYWtlVmlkZW9EYXRhIiwic2xpY2UiLCJyZW5kZXIiLCJ2aWRlb0xpc3QiLCJnZXRSZW5kZXJPdXRwdXQiLCJwcm9wcyIsImNoaWxkcmVuIiwiaGF2ZSIsImxlbmd0aCIsImZvckVhY2giLCJjaGlsZCIsInR5cGUiLCJlcXVhbCIsIlZpZGVvTGlzdEVudHJ5IiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQUEsTUFDekJDLGNBRHlCLEdBQ05DLE1BQU1DLE1BQU4sQ0FBYUMsU0FEUCxDQUN6QkgsY0FEeUI7OztBQUcvQkksS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFEQyxXQUFPSixNQUFNSyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QkMsU0FBOUIsQ0FBUCxFQUFpREMsRUFBakQsQ0FBb0RDLEVBQXBELENBQXVEQyxLQUF2RDtBQUNELEdBRkQ7O0FBSUFQLEtBQUcseURBQUgsRUFBOEQsWUFBVztBQUN2RSxRQUFJUSxrQkFBa0JaLGdCQUF0Qjs7QUFFQSxRQUFJYSxlQUFlQyxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQW5CO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUUosWUFBbkIsR0FERjs7QUFJQSxRQUFJSyxZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCO0FBQ0FkLFdBQU9hLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDWixFQUFqQyxDQUFvQ2EsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQztBQUFBLGFBQVNuQixPQUFPb0IsTUFBTUMsSUFBYixFQUFtQmpCLEVBQW5CLENBQXNCa0IsS0FBdEIsQ0FBNEJDLGNBQTVCLENBQVQ7QUFBQSxLQUFqQztBQUNELEdBWEQ7O0FBYUF4QixLQUFHLDhEQUFILEVBQW1FLFlBQVc7QUFDNUUsUUFBSVEsa0JBQWtCWixnQkFBdEI7O0FBRUEsUUFBSTZCLGtCQUFrQmYsT0FBT0MsYUFBUCxDQUFxQkMsS0FBckIsQ0FBMkIsQ0FBQyxDQUE1QixDQUF0QjtBQUNBSixvQkFBZ0JLLE1BQWhCLENBQ0Usb0JBQUMsU0FBRCxJQUFXLFFBQVFZLGVBQW5CLEdBREY7O0FBSUEsUUFBSVgsWUFBWU4sZ0JBQWdCTyxlQUFoQixFQUFoQjtBQUNBZCxXQUFPYSxVQUFVRSxLQUFWLENBQWdCQyxRQUF2QixFQUFpQ1osRUFBakMsQ0FBb0NhLElBQXBDLENBQXlDQyxNQUF6QyxDQUFnRCxDQUFoRDtBQUNBTCxjQUFVRSxLQUFWLENBQWdCQyxRQUFoQixDQUF5QkcsT0FBekIsQ0FBaUM7QUFBQSxhQUFTbkIsT0FBT29CLE1BQU1DLElBQWIsRUFBbUJqQixFQUFuQixDQUFzQmtCLEtBQXRCLENBQTRCQyxjQUE1QixDQUFUO0FBQUEsS0FBakM7QUFDRCxHQVhEOztBQWFBeEIsS0FBRyw0REFBSCxFQUFpRSxZQUFXO0FBQzFFLFFBQUlRLGtCQUFrQlosZ0JBQXRCOztBQUVBLFFBQUk4QixpQkFBaUJoQixPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXJCO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUWEsY0FBbkIsR0FERjs7QUFJQSxRQUFJWixZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCO0FBQ0FkLFdBQU9hLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDWixFQUFqQyxDQUFvQ2EsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQztBQUFBLGFBQVNuQixPQUFPb0IsTUFBTUMsSUFBYixFQUFtQmpCLEVBQW5CLENBQXNCa0IsS0FBdEIsQ0FBNEJDLGNBQTVCLENBQVQ7QUFBQSxLQUFqQztBQUNELEdBWEQ7QUFZRCxDQTdDRCIsImZpbGUiOiJWaWRlb0xpc3RTcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVzY3JpYmUoJ1ZpZGVvTGlzdCcsIGZ1bmN0aW9uKCkge1xuICB2YXIgeyBjcmVhdGVSZW5kZXJlciB9ID0gUmVhY3QuYWRkb25zLlRlc3RVdGlscztcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKFZpZGVvTGlzdCkpLnRvLmJlLmZhbHNlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgYFZpZGVvTGlzdEVudHJ5YCB3aGVuIGdpdmVuIG9uZSB2aWRlbycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcigpO1xuXG4gICAgdmFyIG9uZUZha2VWaWRlbyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC0xKTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e29uZUZha2VWaWRlb30gLz5cbiAgICApO1xuXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcbiAgICBleHBlY3QodmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuKS50by5oYXZlLmxlbmd0aCgxKTtcbiAgICB2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBleHBlY3QoY2hpbGQudHlwZSkudG8uZXF1YWwoVmlkZW9MaXN0RW50cnkpKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhyZWUgYFZpZGVvTGlzdEVudHJ5YCB3aGVuIGdpdmVuIHRocmVlIHZpZGVvcycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcigpO1xuXG4gICAgdmFyIHRocmVlRmFrZVZpZGVvcyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC0zKTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e3RocmVlRmFrZVZpZGVvc30gLz5cbiAgICApO1xuICAgIFxuICAgIHZhciB2aWRlb0xpc3QgPSBzaGFsbG93UmVuZGVyZXIuZ2V0UmVuZGVyT3V0cHV0KCk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbikudG8uaGF2ZS5sZW5ndGgoMyk7XG4gICAgdmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZXhwZWN0KGNoaWxkLnR5cGUpLnRvLmVxdWFsKFZpZGVvTGlzdEVudHJ5KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGZpdmUgYFZpZGVvTGlzdEVudHJ5YCB3aGVuIGdpdmVuIGZpdmUgdmlkZW9zJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNoYWxsb3dSZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKCk7XG5cbiAgICB2YXIgZml2ZUZha2VWaWRlb3MgPSB3aW5kb3cuZmFrZVZpZGVvRGF0YS5zbGljZSgtNSk7XG4gICAgc2hhbGxvd1JlbmRlcmVyLnJlbmRlcihcbiAgICAgIDxWaWRlb0xpc3QgdmlkZW9zPXtmaXZlRmFrZVZpZGVvc30gLz5cbiAgICApO1xuICAgIFxuICAgIHZhciB2aWRlb0xpc3QgPSBzaGFsbG93UmVuZGVyZXIuZ2V0UmVuZGVyT3V0cHV0KCk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbikudG8uaGF2ZS5sZW5ndGgoNSk7XG4gICAgdmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZXhwZWN0KGNoaWxkLnR5cGUpLnRvLmVxdWFsKFZpZGVvTGlzdEVudHJ5KSk7XG4gIH0pO1xufSk7Il19